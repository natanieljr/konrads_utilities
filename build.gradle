// Current Maintainers:
// Nataniel Borges Jr. <nataniel dot borges at cispa dot saarland>
//
// Former Maintainers:
// Konrad Jamrozik <jamrozik at st dot cs dot uni-saarland dot de>

buildscript {
  repositories {
    mavenCentral()
  }
}

plugins {
  id "org.jetbrains.kotlin.jvm" version "1.2.50"
}
ext.kotlin_version = '1.2.50'

group 'com.github.konrad-jamrozik'
version '0.2.2'

apply plugin: 'kotlin'
apply plugin: 'maven'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
  mavenCentral()
}

task sourcesJar(type: Jar, dependsOn: tasks.classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
  from sourceSets.test.allSource
}

artifacts {
  archives sourcesJar
}

dependencies {

  compile 'commons-io:commons-io:2.6'
  compile 'com.google.jimfs:jimfs:1.1'

  compile 'org.slf4j:slf4j-api:1.7.25'
  compile 'org.slf4j:slf4j-simple:1.7.25'
  
  compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
  testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
  testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
  
  testCompile 'junit:junit:4.12'
  testCompile 'org.junit.jupiter:junit-jupiter-api:5.1.0-M1'
  testCompile 'org.hamcrest:hamcrest-library:1.3'

  jarNamesInBuiltResourcesDir().each { testRuntime files(it) }
}

List<File> jarNamesInBuiltResourcesDir() {
  
  SourceSet test = sourceSets.test
  SourceSetOutput output = test.output

  Set<File> resSrcDirs = test.resources.srcDirs
  assert resSrcDirs.size() == 1
  File resSrcDir = resSrcDirs.first()

  List<File> jars = new LinkedList<>()
  def resFiles = resSrcDir.listFiles(
          new FilenameFilter() {
            @Override
            boolean accept(File dir, String name) {
              return (new File(dir, name).isFile()) && name.endsWith(".jar");
            }
          })

  for(File f: resFiles)
    jars << new File(output.resourcesDir, f.name)

  return jars
}


task testi(type: Test, dependsOn: tasks.testClasses) { Test it ->
  it.outputs.upToDateWhen {false}
  it.include '**/*ResourcePathTest*'
}

apply from: file("log.gradle")

task debug { Task it ->
  it.group = "help"
  doLast {  
    
    println "sourceSets.test.compileClasspath"
    sourceSets.test.compileClasspath.each {println it}
    println "sourceSets.test.runtimeClasspath"
    sourceSets.test.runtimeClasspath.each {println it}
  }
}
